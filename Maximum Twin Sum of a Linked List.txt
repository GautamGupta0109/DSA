/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int pairSum(ListNode* head) {
        // ListNode* temp = head;
        // ListNode* first = head;
        // int n = 0;
        // int maxi = 0;

        // while(temp != NULL){
        //     n++;
        //     temp = temp->next;
        // }

        // if(n == 0){
        //     return 0;
        // }

        // int i = 0;
        // temp = head;
        // while(i<n/2){
        //     int j = 0;

        //     while(j < n-1-i){
        //         temp = temp->next;
        //         j++;
        //     }
        //     int ans = (temp->val) + (first->val);
        //     maxi = max(ans,maxi);
        //     temp = head;
        //     first = first->next; 
        //     i++;
        // }
        
        // return maxi;

        vector<int> arr;
    
        while(head != NULL){
            arr.push_back(head->val);
            head = head->next;
        }
        
        int n = arr.size();
        int maxi = 0;

        for(int i = 0; i<n/2 ; i++){
            int ans = arr[i] + arr[n-1-i];
            maxi = max(maxi,ans);
        }

        return maxi;
        
    }
};